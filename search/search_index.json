{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Declutter Google Calendar CLI to batch delete multiple Google Calendar events \ud83d\udcc6 Delete all events within a specific time period Delete past entries of a specific recurring event series Documentation: Official Website Source Code: Github About the Project Did you ever want to declutter your Google Calendar? Or get rid of old and irrelevant calendar events? You probably realised that neither the Google Calendar app nor the website offer the functionality to batch delete multiple events at once. After deleting more than 100 events from my calendar by hand, I created this CLI program to automate the process. Build with Python Google Api Python Client Typer Prerequisites In order to connect to your Google Calendar you need to create a Google Cloud Platform Project, enable the Google Calendar API and download your credentials. Please have a look at the following guide on how to setup your Google Workspace and get your Credentials Installation Using Poetry (recommended) If you are not already a poetry user, have a look at the official documentation and install poetry for your operating system. Next, execute the following commands to clone the project to your local machine via HTTPS or SSH, cd into the project, create a virtual environment based on the pyproject.toml and install the package to get access to the gcal command. $ git clone https://github.com/t-charura/declutter-google-calendar.git $ cd declutter-google-calendar $ poetry shell $ poetry install Without Poetry If you are not using poetry, you can still use the pyproject.toml to install the package (similar to using setup.py with a requirements.txt ). I recommend that you create and activate a virtual environment before you start the process. Next, execute the following commands to clone the project to your local machine via HTTPS or SSH, cd into the project and install the package using the pyproject.toml $ git clone https://github.com/t-charura/declutter-google-calendar.git $ cd declutter-google-calendar $ python -m pip install . Using pip Coming soon ... How to use Now you should have access to the gcal command. Please run the following commmand to make sure that everything was installed correctly and to read about the CLI in more detail. $ gcal --help You will have access to the following subcommmands: delete Interact with gcal's delete subcommands generate-token Create a token to access your Google Calendar. get Interact with gcal's get subcommands remove-token Delete your Token if it exists. Authentication Before you can start decluttering your Calendar - you have to generate a token that gives you access to your Google Calendar. Please run the following command in the directory that stores your credentials. Make sure that your credential file is named as follows: \"credentials.json\". $ gcal generate-token In case your token has expired - remove it with: $ gcal remove-token and generate a new one by running the command: gcal generate-token in the directory that stores your credentials.json file. See the Prerequisites section if you do not have a credentials file yet. Decluttering Delete all events from a calendar within a specified time period. $ gcal delete batch [OPTIONS] CALENDAR_NAME MAX_DATE [MIN_DATE] CALENDAR_NAME : String to fuzzy match the calendar name. [required] MAX_DATE : Delete all events prior to this date (yyyy-mm-dd). [required] [MIN_DATE] : Delete all events up until this date (yyyy-mm-dd). For example, if you want to delete all events from the calendar named \"Daily Habits\" between 2022-09-01 and 2022-09-22: $ gcal delete batch habits 2022-09-22 2022-09-01 If you do not provide the second date MIN_DATE , all events prior to the first date MAX_DATE will be deleted. For more details and examples have a look at the CLI Documentation . Batch delete past instances of a recurring event. $ gcal delete recurrence [OPTIONS] CALENDAR_NAME EVENT_NAME CALENDAR_NAME : String to fuzzy match the calendar name. [required] EVENT_NAME : String to fuzzy match the recurring event name. [required] -d, --date TEXT : Delete all instances prior to this date (yyyy-mm-dd) For example, if you want to delete all old recurring instances of the event \"Daily exercise for 20 min\" from the calendar named \"Daily Habits\" before the 22nd of September 2022: $ gcal delete recurrence habits exercise -d 2022-09-22 In case you do not provide the date option, all instances prior to today will be deleted. For more details and examples have a look at the CLI Documentation . Next Steps [ ] Publish on pypi.org [ ] Add other methods of authentication Licence Distributed under the MIT License. See LICENSE for more information. Contact Email: tendai.charura@gmail.com Github: t-charura","title":"Home"},{"location":"#declutter-google-calendar","text":"CLI to batch delete multiple Google Calendar events \ud83d\udcc6 Delete all events within a specific time period Delete past entries of a specific recurring event series Documentation: Official Website Source Code: Github","title":"Declutter Google Calendar"},{"location":"#about-the-project","text":"Did you ever want to declutter your Google Calendar? Or get rid of old and irrelevant calendar events? You probably realised that neither the Google Calendar app nor the website offer the functionality to batch delete multiple events at once. After deleting more than 100 events from my calendar by hand, I created this CLI program to automate the process.","title":"About the Project"},{"location":"#build-with","text":"Python Google Api Python Client Typer","title":"Build with"},{"location":"#prerequisites","text":"In order to connect to your Google Calendar you need to create a Google Cloud Platform Project, enable the Google Calendar API and download your credentials. Please have a look at the following guide on how to setup your Google Workspace and get your Credentials","title":"Prerequisites"},{"location":"#installation","text":"","title":"Installation"},{"location":"#using-poetry-recommended","text":"If you are not already a poetry user, have a look at the official documentation and install poetry for your operating system. Next, execute the following commands to clone the project to your local machine via HTTPS or SSH, cd into the project, create a virtual environment based on the pyproject.toml and install the package to get access to the gcal command. $ git clone https://github.com/t-charura/declutter-google-calendar.git $ cd declutter-google-calendar $ poetry shell $ poetry install","title":"Using Poetry (recommended)"},{"location":"#without-poetry","text":"If you are not using poetry, you can still use the pyproject.toml to install the package (similar to using setup.py with a requirements.txt ). I recommend that you create and activate a virtual environment before you start the process. Next, execute the following commands to clone the project to your local machine via HTTPS or SSH, cd into the project and install the package using the pyproject.toml $ git clone https://github.com/t-charura/declutter-google-calendar.git $ cd declutter-google-calendar $ python -m pip install .","title":"Without Poetry"},{"location":"#using-pip","text":"Coming soon ...","title":"Using pip"},{"location":"#how-to-use","text":"Now you should have access to the gcal command. Please run the following commmand to make sure that everything was installed correctly and to read about the CLI in more detail. $ gcal --help You will have access to the following subcommmands: delete Interact with gcal's delete subcommands generate-token Create a token to access your Google Calendar. get Interact with gcal's get subcommands remove-token Delete your Token if it exists.","title":"How to use"},{"location":"#authentication","text":"Before you can start decluttering your Calendar - you have to generate a token that gives you access to your Google Calendar. Please run the following command in the directory that stores your credentials. Make sure that your credential file is named as follows: \"credentials.json\". $ gcal generate-token In case your token has expired - remove it with: $ gcal remove-token and generate a new one by running the command: gcal generate-token in the directory that stores your credentials.json file. See the Prerequisites section if you do not have a credentials file yet.","title":"Authentication"},{"location":"#decluttering","text":"Delete all events from a calendar within a specified time period. $ gcal delete batch [OPTIONS] CALENDAR_NAME MAX_DATE [MIN_DATE] CALENDAR_NAME : String to fuzzy match the calendar name. [required] MAX_DATE : Delete all events prior to this date (yyyy-mm-dd). [required] [MIN_DATE] : Delete all events up until this date (yyyy-mm-dd). For example, if you want to delete all events from the calendar named \"Daily Habits\" between 2022-09-01 and 2022-09-22: $ gcal delete batch habits 2022-09-22 2022-09-01 If you do not provide the second date MIN_DATE , all events prior to the first date MAX_DATE will be deleted. For more details and examples have a look at the CLI Documentation . Batch delete past instances of a recurring event. $ gcal delete recurrence [OPTIONS] CALENDAR_NAME EVENT_NAME CALENDAR_NAME : String to fuzzy match the calendar name. [required] EVENT_NAME : String to fuzzy match the recurring event name. [required] -d, --date TEXT : Delete all instances prior to this date (yyyy-mm-dd) For example, if you want to delete all old recurring instances of the event \"Daily exercise for 20 min\" from the calendar named \"Daily Habits\" before the 22nd of September 2022: $ gcal delete recurrence habits exercise -d 2022-09-22 In case you do not provide the date option, all instances prior to today will be deleted. For more details and examples have a look at the CLI Documentation .","title":"Decluttering"},{"location":"#next-steps","text":"[ ] Publish on pypi.org [ ] Add other methods of authentication","title":"Next Steps"},{"location":"#licence","text":"Distributed under the MIT License. See LICENSE for more information.","title":"Licence"},{"location":"#contact","text":"Email: tendai.charura@gmail.com Github: t-charura","title":"Contact"},{"location":"cli_documentation/","text":"gcal Commands : delete : Interact with gcal's delete subcommands. generate-token : Create a token to access your Google Calendar. get : Interact with gcal's get subcommands. remove-token : Delete your token if it exists. gcal delete Interact with gcal's delete subcommands Commands : batch : Batch delete events within a specific time period. recurrence : Batch delete instances of a recurring event. gcal delete batch Batch delete events within a specific time period. The specific calendar is selected by fuzzy matching with the corresponding parameter. Usage : $ gcal delete batch [OPTIONS] CALENDAR_NAME MAX_DATE [MIN_DATE] Arguments : CALENDAR_NAME : String to fuzzy match the calendar name. [required] MAX_DATE : Delete all events prior to this date (yyyy-mm-dd). [required] [MIN_DATE] : Delete all events up until this date (yyyy-mm-dd). Options : --help : Show this message and exit. Example : If you want to delete all events from the calendar named \"Daily Habits\" before the 22nd of September 2022: $ gcal delete batch habits 2022-09-22 The argument calendar_name (habits) will be matched to the calendar if it is a substring of the calendar name. The argument can also be an exact match. Upper & lower case differences are ignored. Be more specific in your description of calendar_name if there are similar named calendars. The argument max_date (upper bound, exclusive) indicates that all events prior to this date will be deleted from the calendar (if min_date is None). The min_date parameter is optional. If you want to delete events within a time period you have to set min_date in addition to max_date For example - delete all events from the calendar named \"Daily Habits\" between 2022-09-01 and 2022-09-22. $ gcal delete batch habits 2022-09-22 2022-09-01 Be aware of the order of dates. Since max_date is required it is always specified first. gcal delete recurrence Batch delete instances of a recurring event. The specific calendar and event is selected by fuzzy matching with the corresponding parameters (calendar_name & event name). Usage : $ gcal delete recurrence [OPTIONS] CALENDAR_NAME EVENT_NAME Arguments : CALENDAR_NAME : String to fuzzy match the calendar name. [required] EVENT_NAME : String to fuzzy match the recurring event name. [required] Options : -d, --date TEXT : Delete all instances prior to this date (yyyy-mm-dd) --help : Show this message and exit. Exmaple : If you want to delete all old recurring instances of the event \"Daily exercise for 20 min\" from the calendar named \"Daily Habits\" before the 22nd of September 2022: $ gcal delete recurrence habits exercise -d 2022-09-22 The argument calendar_name (habits) will be matched to the calendar if it is a substring of the calendar name. The argument event_name (exercise) will be matched to the event if it is a substring of the event name. The arguments can also be exact matches. Upper & lower case differences are ignored. Be more specific in your description of calendar_name and event_name if there are similar named calendars or events. The date value (-d) is optional. If no date value is set, all instances prior to today will be deleted. gcal generate-token Create a token to access your Google Calendar. The token is generated based on your Google credentials. Run this command in the directory that contains your Google access credentials. Make sure that your credentials file is named: \"credentials.json\". Usage : $ gcal generate-token [OPTIONS] Options : --help : Show this message and exit. gcal get Interact with gcal's get subcommands. Commands : calendars : Show all availabe calendars in your Google account. events : Show events from a specific calendar. gcal get calendars Show all availabe calendars in your Google account. Usage : $ gcal get calendars [OPTIONS] Options : --help : Show this message and exit. gcal get events Show events from a specific calendar Usage : $ gcal get events [OPTIONS] CALENDAR_NAME Arguments : CALENDAR_NAME : String to fuzzy match the calendar name [required] Options : --help : Show this message and exit. gcal remove-token Delete your token if it exists. Usage : $ gcal remove-token [OPTIONS] Options : --help : Show this message and exit.","title":"CLI Documentation"},{"location":"cli_documentation/#gcal","text":"Commands : delete : Interact with gcal's delete subcommands. generate-token : Create a token to access your Google Calendar. get : Interact with gcal's get subcommands. remove-token : Delete your token if it exists.","title":"gcal"},{"location":"cli_documentation/#gcal-delete","text":"Interact with gcal's delete subcommands Commands : batch : Batch delete events within a specific time period. recurrence : Batch delete instances of a recurring event.","title":"gcal delete"},{"location":"cli_documentation/#gcal-delete-batch","text":"Batch delete events within a specific time period. The specific calendar is selected by fuzzy matching with the corresponding parameter. Usage : $ gcal delete batch [OPTIONS] CALENDAR_NAME MAX_DATE [MIN_DATE] Arguments : CALENDAR_NAME : String to fuzzy match the calendar name. [required] MAX_DATE : Delete all events prior to this date (yyyy-mm-dd). [required] [MIN_DATE] : Delete all events up until this date (yyyy-mm-dd). Options : --help : Show this message and exit. Example : If you want to delete all events from the calendar named \"Daily Habits\" before the 22nd of September 2022: $ gcal delete batch habits 2022-09-22 The argument calendar_name (habits) will be matched to the calendar if it is a substring of the calendar name. The argument can also be an exact match. Upper & lower case differences are ignored. Be more specific in your description of calendar_name if there are similar named calendars. The argument max_date (upper bound, exclusive) indicates that all events prior to this date will be deleted from the calendar (if min_date is None). The min_date parameter is optional. If you want to delete events within a time period you have to set min_date in addition to max_date For example - delete all events from the calendar named \"Daily Habits\" between 2022-09-01 and 2022-09-22. $ gcal delete batch habits 2022-09-22 2022-09-01 Be aware of the order of dates. Since max_date is required it is always specified first.","title":"gcal delete batch"},{"location":"cli_documentation/#gcal-delete-recurrence","text":"Batch delete instances of a recurring event. The specific calendar and event is selected by fuzzy matching with the corresponding parameters (calendar_name & event name). Usage : $ gcal delete recurrence [OPTIONS] CALENDAR_NAME EVENT_NAME Arguments : CALENDAR_NAME : String to fuzzy match the calendar name. [required] EVENT_NAME : String to fuzzy match the recurring event name. [required] Options : -d, --date TEXT : Delete all instances prior to this date (yyyy-mm-dd) --help : Show this message and exit. Exmaple : If you want to delete all old recurring instances of the event \"Daily exercise for 20 min\" from the calendar named \"Daily Habits\" before the 22nd of September 2022: $ gcal delete recurrence habits exercise -d 2022-09-22 The argument calendar_name (habits) will be matched to the calendar if it is a substring of the calendar name. The argument event_name (exercise) will be matched to the event if it is a substring of the event name. The arguments can also be exact matches. Upper & lower case differences are ignored. Be more specific in your description of calendar_name and event_name if there are similar named calendars or events. The date value (-d) is optional. If no date value is set, all instances prior to today will be deleted.","title":"gcal delete recurrence"},{"location":"cli_documentation/#gcal-generate-token","text":"Create a token to access your Google Calendar. The token is generated based on your Google credentials. Run this command in the directory that contains your Google access credentials. Make sure that your credentials file is named: \"credentials.json\". Usage : $ gcal generate-token [OPTIONS] Options : --help : Show this message and exit.","title":"gcal generate-token"},{"location":"cli_documentation/#gcal-get","text":"Interact with gcal's get subcommands. Commands : calendars : Show all availabe calendars in your Google account. events : Show events from a specific calendar.","title":"gcal get"},{"location":"cli_documentation/#gcal-get-calendars","text":"Show all availabe calendars in your Google account. Usage : $ gcal get calendars [OPTIONS] Options : --help : Show this message and exit.","title":"gcal get calendars"},{"location":"cli_documentation/#gcal-get-events","text":"Show events from a specific calendar Usage : $ gcal get events [OPTIONS] CALENDAR_NAME Arguments : CALENDAR_NAME : String to fuzzy match the calendar name [required] Options : --help : Show this message and exit.","title":"gcal get events"},{"location":"cli_documentation/#gcal-remove-token","text":"Delete your token if it exists. Usage : $ gcal remove-token [OPTIONS] Options : --help : Show this message and exit.","title":"gcal remove-token"},{"location":"google_workspace_setup/","text":"Google Workspace Setup Images within this artcile can not be viewed within GitHub. Please refer to the official documentation . Create a Google Cloud Project Open https://console.cloud.google.com/ At the top-left, click Menu (A) > IAM & Admin (B) > Create a Project (C) . In the Project Name field, enter a descriptive name for your project and click Create Reference: https://developers.google.com/workspace/guides/create-project Enable the Google Calendar API Open https://console.cloud.google.com/ At the top-left, click Menu > APIs & Services > Library . In the search field, enter the name Google Calendar API and press Enter. In the list of search results, click on the Google Calendar API Click Enable Reference: https://developers.google.com/workspace/guides/enable-apis Create & Download Credentials Open https://console.cloud.google.com/ At the top-left, click Menu > APIs & Services > Credentials . Click Create Credentials > OAuth client ID . Before you can continue with 4. you probably have to \"Configure the OAuth consent screen\" Click CONFIGURE CONSENT SCREEN (if there is no such button, please continue with step 4.) Select External and click CREATE OAuth consent screen - under App information enter an App name in the field \"App name\" and add your Email in the field \"User supportmail.com\". OAuth consent screen - at the end of the page add your Email under Developer contact information in the field \"Email addresses\". Click SAVE AND CONTINUE Scopes - Click SAVE AND CONTINUE (not necessary to make any adjustments here) Test users - Click ADD USERS and add your Email again. Click SAVE AND CONTINUE Congratulations, you have configured the OAuth consent screen. Go back to the credentials page (step 2.) and click Create Credentials > OAuth client ID . Now you can continue with step 4 below. Click Application type > Desktop app . In the Name field, type a name for the credential. This name is only shown in the Google Cloud console. Click Create . The OAuth client created screen appears, showing your new Client ID and Client secret. Click DOWNLOAD JSON . A file is downloaded with a name similar to: client_secret_...com.json Rename the downloaded file to credentials.json Reference: https://developers.google.com/workspace/guides/create-credentials#desktop-app","title":"Google Workspace Setup"},{"location":"google_workspace_setup/#google-workspace-setup","text":"Images within this artcile can not be viewed within GitHub. Please refer to the official documentation .","title":"Google Workspace Setup"},{"location":"google_workspace_setup/#create-a-google-cloud-project","text":"Open https://console.cloud.google.com/ At the top-left, click Menu (A) > IAM & Admin (B) > Create a Project (C) . In the Project Name field, enter a descriptive name for your project and click Create Reference: https://developers.google.com/workspace/guides/create-project","title":"Create a Google Cloud Project"},{"location":"google_workspace_setup/#enable-the-google-calendar-api","text":"Open https://console.cloud.google.com/ At the top-left, click Menu > APIs & Services > Library . In the search field, enter the name Google Calendar API and press Enter. In the list of search results, click on the Google Calendar API Click Enable Reference: https://developers.google.com/workspace/guides/enable-apis","title":"Enable the Google Calendar API"},{"location":"google_workspace_setup/#create-download-credentials","text":"Open https://console.cloud.google.com/ At the top-left, click Menu > APIs & Services > Credentials . Click Create Credentials > OAuth client ID . Before you can continue with 4. you probably have to \"Configure the OAuth consent screen\" Click CONFIGURE CONSENT SCREEN (if there is no such button, please continue with step 4.) Select External and click CREATE OAuth consent screen - under App information enter an App name in the field \"App name\" and add your Email in the field \"User supportmail.com\". OAuth consent screen - at the end of the page add your Email under Developer contact information in the field \"Email addresses\". Click SAVE AND CONTINUE Scopes - Click SAVE AND CONTINUE (not necessary to make any adjustments here) Test users - Click ADD USERS and add your Email again. Click SAVE AND CONTINUE Congratulations, you have configured the OAuth consent screen. Go back to the credentials page (step 2.) and click Create Credentials > OAuth client ID . Now you can continue with step 4 below. Click Application type > Desktop app . In the Name field, type a name for the credential. This name is only shown in the Google Cloud console. Click Create . The OAuth client created screen appears, showing your new Client ID and Client secret. Click DOWNLOAD JSON . A file is downloaded with a name similar to: client_secret_...com.json Rename the downloaded file to credentials.json Reference: https://developers.google.com/workspace/guides/create-credentials#desktop-app","title":"Create &amp; Download Credentials"}]}